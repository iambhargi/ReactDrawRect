{"version":3,"sources":["assets/bgImage.png","components/ColoredRect.js","components/DrawRect.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ColoredRect","props","state","color","opacity","x","this","y","width","height","fill","Component","DrawRect","handleClick","e","isDrawing","setState","newShapes","shapes","slice","push","evt","layerX","layerY","handleMouseMove","mouseX","mouseY","currShapeIndex","length","currShape","newWidth","newHeight","newShapesList","style","backgroundImage","require","backgroundPosition","backgroundSize","backgroundRepeat","window","innerWidth","innerHeight","onContentClick","onContentMouseMove","ref","map","shape","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,qC,2HC6B5BC,E,kDAxBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,QACPC,QAAS,IAJE,E,qDASf,OACI,kBAAC,QAAD,KACI,kBAAC,OAAD,CACIC,EAAGC,KAAKL,MAAMI,EACdE,EAAGD,KAAKL,MAAMM,EACdC,MAAOF,KAAKL,MAAMO,MAClBC,OAAQH,KAAKL,MAAMQ,OACnBC,KAAMJ,KAAKJ,MAAMC,MACjBC,QAASE,KAAKJ,MAAME,e,GAlBdO,aCqFXC,E,kDApFX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAOVY,YAAc,SAACC,GACX,GAAI,EAAKZ,MAAMa,UACX,EAAKC,SAAS,CACVD,WAAY,EAAKb,MAAMa,gBAF/B,CAOA,IAAME,EAAY,EAAKf,MAAMgB,OAAOC,QACpCF,EAAUG,KAAK,CACXf,EAAGS,EAAEO,IAAIC,OACTf,EAAGO,EAAEO,IAAIE,OACTf,MAAO,EACPC,OAAQ,IAGZ,EAAKO,SAAS,CACVD,WAAW,EACXG,OAAQD,MA1BG,EA8BnBO,gBAAkB,SAACV,GACf,IAAMW,EAASX,EAAEO,IAAIC,OACfI,EAASZ,EAAEO,IAAIE,OAErB,GAAI,EAAKrB,MAAMa,UAAW,CACtB,IAAMY,EAAiB,EAAKzB,MAAMgB,OAAOU,OAAS,EAC5CC,EAAY,EAAK3B,MAAMgB,OAAOS,GAC9BG,EAAWL,EAASI,EAAUxB,EAC9B0B,EAAYL,EAASG,EAAUtB,EAE/ByB,EAAgB,EAAK9B,MAAMgB,OAAOC,QACxCa,EAAcL,GAAkB,CAC5BtB,EAAGwB,EAAUxB,EACbE,EAAGsB,EAAUtB,EACbC,MAAOsB,EACPrB,OAAQsB,GAGZ,EAAKf,SAAS,CACVE,OAAQc,MA/ChB,EAAK9B,MAAQ,CACTgB,OAAQ,GACRH,WAAW,GAJA,E,qDAuDf,OACI,yBAAKkB,MAAO,CACRC,gBAAgB,OAAD,OAASC,EAAQ,IAAjB,KACfC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,cAElB,kBAAC,QAAD,CAAO9B,MAAO+B,OAAOC,WAAY/B,OAAQ8B,OAAOE,YAC5CC,eAAgBpC,KAAKO,YACrB8B,mBAAoBrC,KAAKkB,iBAEzB,kBAAC,QAAD,CAAOoB,IAAI,SACNtC,KAAKJ,MAAMgB,OAAO2B,KAAI,SAAAC,GACnB,OACI,kBAAC,EAAD,CACIzC,EAAGyC,EAAMzC,EACTE,EAAGuC,EAAMvC,EACTC,MAAOsC,EAAMtC,MACbC,OAAQqC,EAAMrC,mB,GA1E3BE,aCQRoC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a83880ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgImage.aaf28585.png\";","import React, { Component } from 'react';\r\nimport { Rect, Group } from 'react-konva';\r\n\r\n\r\nclass ColoredRect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color: 'white',\r\n            opacity: 0.5\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Group>\r\n                <Rect\r\n                    x={this.props.x}\r\n                    y={this.props.y}\r\n                    width={this.props.width}\r\n                    height={this.props.height}\r\n                    fill={this.state.color}\r\n                    opacity={this.state.opacity}\r\n                />\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColoredRect","import React, { Component } from 'react'\r\nimport { Layer, Stage } from 'react-konva';\r\nimport ColoredRect from './ColoredRect';\r\n\r\nclass DrawRect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            shapes: [],\r\n            isDrawing: false,\r\n        }\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (this.state.isDrawing) {\r\n            this.setState({\r\n                isDrawing: !this.state.isDrawing,\r\n            })\r\n            return;\r\n        }\r\n\r\n        const newShapes = this.state.shapes.slice();\r\n        newShapes.push({\r\n            x: e.evt.layerX,\r\n            y: e.evt.layerY,\r\n            width: 0,\r\n            height: 0,\r\n        });\r\n\r\n        this.setState({\r\n            isDrawing: true,\r\n            shapes: newShapes,\r\n        })\r\n    }\r\n\r\n    handleMouseMove = (e) => {\r\n        const mouseX = e.evt.layerX;\r\n        const mouseY = e.evt.layerY;\r\n\r\n        if (this.state.isDrawing) {\r\n            const currShapeIndex = this.state.shapes.length - 1;\r\n            const currShape = this.state.shapes[currShapeIndex];\r\n            const newWidth = mouseX - currShape.x;\r\n            const newHeight = mouseY - currShape.y;\r\n\r\n            const newShapesList = this.state.shapes.slice();\r\n            newShapesList[currShapeIndex] = {\r\n                x: currShape.x,\r\n                y: currShape.y,\r\n                width: newWidth,\r\n                height: newHeight\r\n            }\r\n\r\n            this.setState({\r\n                shapes: newShapesList,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                backgroundImage: `url(${require(\"../assets/bgImage.png\")})`,\r\n                backgroundPosition: 'center',\r\n                backgroundSize: 'cover',\r\n                backgroundRepeat: 'no-repeat'\r\n            }}>\r\n                <Stage width={window.innerWidth} height={window.innerHeight}\r\n                    onContentClick={this.handleClick}\r\n                    onContentMouseMove={this.handleMouseMove}\r\n                >\r\n                    <Layer ref='layer'>\r\n                        {this.state.shapes.map(shape => {\r\n                            return (\r\n                                <ColoredRect\r\n                                    x={shape.x}\r\n                                    y={shape.y}\r\n                                    width={shape.width}\r\n                                    height={shape.height}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrawRect\r\n","import React from 'react'\nimport DrawRect from './components/DrawRect'\n\n\nfunction App() {\n  return (\n    <div>\n      <DrawRect />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}